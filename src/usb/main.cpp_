#include <WiFiManager.h>
#include <WebServer.h>     // Webserver library
#include <ESPAsyncWebServer.h>  // Asynchronous WebServer
#include <ArduinoJson.h>
#include <BLEDevice.h>
#include <BLEHIDDevice.h>
#include <BLEUtils.h>
#include <HIDTypes.h>
#include <HIDKeyboardTypes.h>
#include "EspUsbHost.h"
#include "reportMap.h"
#include <IRremote.h>
#include <IRremote.hpp> 

// Webserver Variables
WebServer server(80);  // Create a web server on port 80
String serialOutput = "";  // Stores the serial data for web display

void printStatus(const char* message);
void handleRoot();
void handleSerialOutput();
void handleWerkstattMode();
void handleSendIR();
//void setupIRSender();
//void setupIRReceiver();
// Nur in der Klassendeklaration MyEspUsbHost:
//void checkIRReceiver();


// BLE HID service variables
BLEHIDDevice* hid;
BLECharacteristic* input;
BLECharacteristic* output;
uint16_t conn_id = 0xFFFF;
bool is_ble_connected = false;

unsigned long keyPressStartTime = 0;
bool keyPressed = false;

//IrReceiver.begin(13, ENABLE_LED_FEEDBACK);   // IR-Empfänger an GPIO 13
decode_results results;  // Objekt für die Decodierung von IR-Signalen

//IRsend irsend(4);  // IR-Sender an GPIO 4


const char* htmlLayout = R"(
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
<style>
    body {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr;
        height: 100vh;
        margin: 0;
    }
    .region {
        border: 1px solid #ccc;
        padding: 20px;
    }
    .region2 {
        grid-column: 2 / 3;
        grid-row: 1 / 2;
        text-align: center;
        background-color: #f0f0f0;
        max-height: 200px;
        overflow-y: auto;
    }
</style>

<div class="region">
<h1>Settings:</h1>
<p>Werkstattmode<input type='checkbox' id='werkstattMode' onclick='toggleWerkstattMode()' /></p></div>
<div class="region region2">Serial Output:<br><pre id="serialOutput">%SERIAL_OUTPUT%</pre></div>
<div class="region">Region 3</div>
<div class="region">
    <h2>IR Sender</h2>
    <input type="text" id='irCodeInput' value="0xFFA25D" placeholder='Enter IR code in HEX'>
    <button onclick='sendIRCode()'>Send IR Code</button>
</div>
<div class="region">Region 5</div>
<div class="region">Region 6</div>
<script>
    setInterval(function() {
        fetch('/serial')
            .then(response => response.text())
            .then(data => {
                let serialOutputElement = document.getElementById('serialOutput');
                serialOutputElement.innerHTML = data;
                serialOutputElement.scrollTop = 0; // Scroll to the top
            });
    }, 1000);

    function toggleWerkstattMode() {
        var checkbox = document.getElementById('werkstattMode');
        fetch('/werkstatt_mode', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ werkstattMode: checkbox.checked })
        });
    }

    function sendIRCode() {
        let irCode = document.getElementById('irCodeInput').value;
        fetch('/send_ir', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ irCode: irCode })
        });  
    }
    </script>

</body>
</html>
)"; 

// USB Host
class MyEspUsbHost : public EspUsbHost {
public:
    bool usb_connected = false;

    void onKeyboardKey(uint8_t ascii, uint8_t keycode, uint8_t modifier) {
        usb_connected = true;
    
        if (!keyPressed) {  // Taste wurde gerade gedrückt
            keyPressStartTime = millis();  // Speichere den Zeitpunkt des Tastendrucks
            keyPressed = true;  // Setze den Status auf "Taste gedrückt"
        } else {  // Taste wurde losgelassen
            // Berechne die gedrückte Zeit
            unsigned long duration = millis() - keyPressStartTime;  // Zeitdauer in Millisekunden
            String keyEntry = String("Key: ") + String(keycode, HEX) + 
                              " (ASCII:" + String((char)ascii) + 
                              ") Modifier: " + String(modifier, HEX) + 
                              " Duration: " + String(duration) + " ms\n";

            serialOutput = keyEntry + serialOutput;  // Füge die Ausgabe zur seriellen Ausgabe hinzu
            Serial.printf("%s", keyEntry.c_str());

            // Rufe die neue Funktion zum Senden des BLE-Reports auf
            sendBleReport(modifier, keycode);

            // Reset der Statusvariablen
            keyPressed = false;  // Setze den Status auf "Taste nicht gedrückt"
        }
     }
    void setupIRReceiver() {
        Serial.println("Initializing IR Receiver...");
        IrReceiver.begin(4, false);  // Verwende die globale Instanz IrReceiver
        Serial.println("IR Receiver initialized");
    }

    void checkIRReceiver() {
        if (IrReceiver.decode()) {  // Prüfe auf ein neues IR-Signal
            // Extrahiere die Daten
            uint32_t address = IrReceiver.decodedIRData.address;
            uint32_t command = IrReceiver.decodedIRData.command;
            uint32_t protocol = IrReceiver.decodedIRData.protocol;

            // Ausgabe ähnlich wie bei USB-Eingaben
            String irEntry = "IR Address: " + String(address, HEX) +
                            ", Command: " + String(command, HEX) +
                            ", Protocol: " + String(protocol) + "\n";

            serialOutput = irEntry + serialOutput;  // Ausgabe zur seriellen Anzeige hinzufügen
            Serial.printf("%s", irEntry.c_str());

            IrReceiver.resume();  // IR-Empfänger für das nächste Signal bereitmachen
        }
    }
    
    void setupIRSender() {
        IrSender.begin(5);  // GPIO 4 für IR-Sender, LED_BUILTIN als Feedback-Pin
        Serial.println("IR Sender initialized");
    } 

    void sendIRSignal(uint32_t irCode) {
        //uint32_t rCode = 0xFFA25D;
        Serial.println("IR Sender loop");
        delay(500);
        Serial.printf("Send IR Code: %X\n", irCode); 
        for (int i = 0; i < 50; i++) {
            IrSender.sendNECMSB(irCode, 32);  // Sendet im NEC-Protokoll (MSB)
            delay(15);  // 15 ms Pause
        }
        //IrSender.sendNECMSB(rCode, 32);  // Sendet im NEC-Protokoll (MSB)
    }  

    // Neue Funktion zum Senden des BLE-Reports
void sendBleReport(uint8_t modifier, uint8_t keycode) {
    if (is_ble_connected) {
        uint8_t report[8] = {0};
        report[0] = modifier; // Setze das Modifier-Byte
        report[2] = keycode;  // Setze den Keycode
        input->setValue(report, sizeof(report)); // Setze den Wert des Reports
        input->notify(); // Sende den Report über BLE

        // Optional: Hier könnte eine Verzögerung und ein Reset des Reports erfolgen
        delay(100);
        memset(report, 0, sizeof(report)); // Setze den Report zurück
        input->setValue(report, sizeof(report)); // Leeren Report senden
        input->notify(); // Sende den leeren Report über BLE
    }else {
            Serial.println("BLE not connected, discarding key input.");
        }
}

    void onUsbDisconnect() {
        usb_connected = false;
        Serial.println("\nUSB device disconnected. Restarting USB host...");
        begin();
    }
};

MyEspUsbHost usbHost;

class MyCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
        is_ble_connected = true;
        Serial.println("\nBLE connected");
    }

    void onDisconnect(BLEServer* pServer) {
        is_ble_connected = false;
        Serial.println("\nBLE disconnected");
    }
};

// Helper Functions
//19(D-) + 20(D+) (USB not UART) 
void setupUSBHost() {
    usbHost.begin();
    Serial.println("USB Keyboard initialized");
}

void setupWiFi() {
    WiFiManager wm;
    if (!wm.autoConnect("ESP32_AutoConnect")) {
        Serial.println("Failed to connect to WiFi. Restarting...");
        delay(3000);
        ESP.restart();
    }
}

void setupWebServer() {
    server.on("/", handleRoot);
    server.on("/serial", handleSerialOutput);
    server.on("/werkstatt_mode", handleWerkstattMode);
    server.on("/send_ir", handleSendIR);
    server.begin();
    Serial.println("Web server started.");
}

void setupBLE() {
    BLEDevice::init("ESP32 BLE Keyboard");
    BLEServer* pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyCallbacks());

    hid = new BLEHIDDevice(pServer);
    input = hid->inputReport(1);
    output = hid->outputReport(1);

    hid->manufacturer()->setValue("ESP32");
    hid->pnp(0x01, 0x02e5, 0xabcd, 0x0110);
    hid->hidInfo(0x00, 0x01);

    BLESecurity* pSecurity = new BLESecurity();
    pSecurity->setAuthenticationMode(ESP_LE_AUTH_BOND);

    hid->reportMap((uint8_t*)reportMap, sizeof(reportMap));
    hid->startServices();

    BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();
    pAdvertising->setAppearance(HID_KEYBOARD);
    pAdvertising->addServiceUUID(hid->hidService()->getUUID());
    pAdvertising->start();
    Serial.println("Waiting for a client connection to notify...");
}

void handleSendIR() {
    if (server.method() == HTTP_POST) {
        String body = server.arg("plain");
        DynamicJsonDocument doc(1024);
        deserializeJson(doc, body);
        String irCodeStr = doc["irCode"];

        // Convert the IR code string to a 32-bit integer
        uint32_t irCode = strtoul(irCodeStr.c_str(), nullptr, 16);

        // Send the IR code
        usbHost.sendIRSignal(irCode);

        server.send(200, "application/json", "{\"status\": \"ok\"}");
    }
}

// Setup function with modularized calls
void setup() {
    Serial.begin(115200);
    Serial.println("Starting setup...");

    setupUSBHost();
    setupWiFi();
    setupWebServer();
    setupBLE();
    Serial.print("Free heap before IR setup: ");
    Serial.println(ESP.getFreeHeap());
    usbHost.setupIRReceiver();    // Initialisiert den IR-Empfänger
    usbHost.setupIRSender();      // Initialisiert den IR-Sender
    Serial.print("Free heap after IR setup: ");
    Serial.println(ESP.getFreeHeap());
}

void loop() {
    usbHost.task();
    server.handleClient();
    //usbHost.checkIRReceiver();
/*     if (IrReceiver.decode(&results)) {  // Dekodiere das IR-Signal
        printStatus("Received IR signal: ");
                printStatus("Raw data: ");
        for (int i = 1; i < results.rawlen; i++) {
            Serial.print(results.rawbuf[i] * 50);  // Multipliziere mit 50, um die Zeit in Mikrosekunden zu erhalten
            Serial.print("us ");
        }
        // Optional: Ausgabe des dekodierten Wertes
        Serial.print("Value: ");
        Serial.println(results.value, HEX);   // Wert des Signals in Hex

        // Überprüfen, ob eine Adresse vorhanden ist (abhängig vom verwendeten Protokoll)
        if (results.address != 0) {
            Serial.print("Address: ");
            Serial.println(results.address, HEX);   // Adresse des Signals in Hex
        }
        
        IrReceiver.resume();  // Bereite den Empfänger für das nächste Signal vor
    } */
     if (IrReceiver.decode()) {
        printStatus("Received IR signal: ");
        IrReceiver.printIRResultShort(&Serial);
        IrReceiver.resume();
  }

    if (!usbHost.usb_connected) {
        printStatus("No USB device connected, waiting...");
        delay(500);
    }

    if (!is_ble_connected) {
        BLEDevice::startAdvertising();
        printStatus("Re-starting BLE advertising...");
        delay(500);
    }

    delay(10);
}

// Handler Functions
void handleRoot() {
    String page = htmlLayout;
    page.replace("%SERIAL_OUTPUT%", serialOutput);
    server.send(200, "text/html", page);
}

void handleSerialOutput() {
    server.send(200, "text/plain", serialOutput);
}


void handleWerkstattMode() {
    if (server.method() == HTTP_POST) {
        String body = server.arg("plain");
        DynamicJsonDocument doc(1024);
        deserializeJson(doc, body);
        bool werkstattMode = doc["werkstattMode"];
        if (werkstattMode) {
            Serial.println("Werkstatt-Mode aktiviert. USB und BLE Dienste werden deaktiviert.");
            // USB und BLE deaktivieren
            BLEDevice::stopAdvertising();
        } else {
            Serial.println("Werkstatt-Mode deaktiviert. USB und BLE Dienste werden aktiviert.");
            BLEDevice::startAdvertising();
        }
    }
    server.send(200, "application/json", "{\"status\": \"ok\"}");
}




void printStatus(const char* message) {
    static char spin_chars[] = {'|', '/', '-', '\\'};
    static int spin_index = 0;
    Serial.printf("\r%s %c", message, spin_chars[spin_index]);
    spin_index = (spin_index + 1) % 4;
}