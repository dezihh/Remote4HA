#include <Arduino.h>
#include <hidcomposite.h>
#include <usbhub.h>
#include <SPI.h>

// SPI Pin Definitionen für ESP32 (NodeMCU ESP32 Wroom 32)
#define PIN_MISO 19
#define PIN_MOSI 23
#define PIN_SCK 18
#define PIN_SS 5  // Chip Select Pin für das USB Host Shield

// Override HIDComposite to be able to select which interface we want to hook into
class HIDSelector : public HIDComposite
{
public:
    HIDSelector(USB *p) : HIDComposite(p) {};

protected:
    void ParseHIDData(USBHID *hid, uint8_t ep, bool is_rpt_id, uint8_t len, uint8_t *buf); // Called by the HIDComposite library
    bool SelectInterface(uint8_t iface, uint8_t proto);
};

// Return true for the interface we want to hook into
bool HIDSelector::SelectInterface(uint8_t iface, uint8_t proto)
{
  if (proto != 0)
    return true;

  return false;
}

// Will be called for all HID data received from the USB interface
void HIDSelector::ParseHIDData(USBHID *hid, uint8_t ep, bool is_rpt_id, uint8_t len, uint8_t *buf) {
#if 1
  if (len && buf)  {
    Notify(PSTR("\r\n"), 0x80);
    for (uint8_t i = 0; i < len; i++) {
      D_PrintHex<uint8_t > (buf[i], 0x80);
      Notify(PSTR(" "), 0x80);
    }
  }
#endif
}

USB Usb;
HIDSelector hidSelector(&Usb);

void setup()
{
  Serial.begin(115200);
  while (!Serial);

  Serial.println("Start");

  // SPI Pins definieren
  SPI.begin(PIN_SCK, PIN_MISO, PIN_MOSI, PIN_SS);

  if (Usb.Init() == -1) {
    Serial.println("USB Host Shield initialization failed.");
    return;
  }
  Serial.println("USB Host Shield initialized.");

  // Set this to higher values to enable more debug information
  // minimum 0x00, maximum 0xff, default 0x80
  UsbDEBUGlvl = 0xff;

  delay(200);
}

void loop()
{
  Usb.Task();
}
